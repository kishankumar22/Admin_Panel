generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Role Table
model Role {
  role_id        Int      @id @default(autoincrement()) // Primary key
  name           String   @unique                      // Role name (unique)
  users          User[]   @relation("RoleToUser")      // One-to-Many relationship with User
}

// User Table
model User {
  user_id        Int      @id @default(autoincrement()) // Primary key
  name           String   @db.VarChar(255)             // User's name
  email          String   @unique                      // User's email (unique)
  mobileNo       String   @db.VarChar(15)              // Mobile number
  password       String                                // Hashed password
  roleId         Int                                    // Foreign key to Role table
  role           Role     @relation("RoleToUser", fields: [roleId], references: [role_id]) // Role reference
  created_on     DateTime?          // Timestamp for user creation
  created_by     String?                                // Who created the user
  modify_on      DateTime?                   // Auto-update timestamp
  modify_by      String?                                // Who modified the user
  notifications  Notification[]                        // One-to-Many relationship with Notification
}

// Notification Table
model Notification {
  notification_id        Int      @id @default(autoincrement()) // Primary key
  notification_message   String   @db.VarChar(225)             // Notification message
  notification_url       String                                  // URL or file location
  public_id              String?                                // Cloudinary public ID (nullable for URLs)
  userId                 Int                                    // Foreign key to User table
  user                   User     @relation(fields: [userId], references: [user_id]) // Reference to User
  created_on             DateTime @default(now())               // Timestamp for notification creation
  created_by             String                                  // Who created the notification
  modify_by              String?                                 // Who modified the notification (Optional)
  modify_on              DateTime?                              // Timestamp of last modification (Optional)
}
model Banner {
  id             Int      @id @default(autoincrement())
  bannerUrl      String
  bannerName     String
  bannerPosition Int
  created_on     DateTime @default(now())
  created_by     String
  modify_on      DateTime?
  modify_by      String?
  publicId       String
  IsVisible       Boolean  @default(true) // New field added
}
model Gallery {
  id             Int      @id @default(autoincrement())
  galleryUrl     String
  galleryName    String
  galleryPosition Int
  created_on     DateTime @default(now())
  created_by     String
  modify_on      DateTime?
  modify_by      String?
  publicId       String
  IsVisible       Boolean  @default(true) // New field added
}

model ImportantLinks {
  id            Int      @id @default(autoincrement())
  LOGOUrl      String   // Logo ki URL store hogi
  linksUrl     String   // User jo link dega wo store hoga
  logoName     String   //  
  logoPosition Int      // 
  created_on   DateTime @default(now())
  created_by   String
  modify_on    DateTime?
  modify_by    String?
  publicId     String  
  IsVisible    Boolean  @default(true) // Visibility toggle ke liye
}

model Faculty {
  id             Int      @id @default(autoincrement())
  faculty_name           String
  qualification  String
  designation    String
  profilePicUrl  String?
  created_on     DateTime @default(now())
  created_by     String
  modify_on      DateTime?
  modify_by      String?
  IsVisible       Boolean  @default(true) // New field added
}
model LatestPost {
  post_id      Int      @id @default(autoincrement()) // Unique identifier for the post
  post_title   String   // Title of the post
  post_slug    String   @unique // Slug for the post, must be unique
  post_content String   @db.Text // Use @db.Text for large text in MySQL
  created_by   String   // User who created the post
  created_on   DateTime @default(now()) // Timestamp for when the post was created
  modify_by    String?  // User who last modified the post (optional)
  modify_on    DateTime? // Timestamp for when the post was last modified (optional)
  isVisible    Boolean  @default(true) // Visibility status of the post
}