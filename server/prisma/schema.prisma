generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"] // Add your required target here
}
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")

}

// Role Table
model Role {
  role_id     Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       @relation("RoleToUser")
  permissions Permission[] // Add this line to establish the back relation
}

// User Table
model User {
  user_id       Int            @id @default(autoincrement()) // Primary key
  name          String         @db.NVarChar(255) // User's name
  email         String         @unique // User's email (unique)
  mobileNo      String         @db.NVarChar(15) // Mobile number
  password      String // Hashed password
  roleId        Int // Foreign key to Role table
  role          Role           @relation("RoleToUser", fields: [roleId], references: [role_id]) // Role reference
  created_on    DateTime? // Timestamp for user creation
  created_by    String? // Who created the user
  modify_on     DateTime? // Auto-update timestamp
  modify_by     String? // Who modified the user
  notifications Notification[] // One-to-Many relationship with Notification
}

// Notification Table
model Notification {
  notification_id      Int       @id @default(autoincrement()) // Primary key
  notification_message String    @db.NVarChar(225) // Notification message
  notification_url     String // URL or file location
  public_id            String? // Cloudinary public ID (nullable for URLs)
  userId               Int // Foreign key to User table
  user                 User      @relation(fields: [userId], references: [user_id]) // Reference to User
  created_on           DateTime  @default(now()) // Timestamp for notification creation
  created_by           String // Who created the notification
  modify_by            String? // Who modified the notification (Optional)
  modify_on            DateTime? // Timestamp of last modification (Optional)
}

// Banner Table
model Banner {
  id             Int       @id @default(autoincrement())
  bannerUrl      String
  bannerName     String
  bannerPosition Int
  created_on     DateTime  @default(now())
  created_by     String
  modify_on      DateTime?
  modify_by      String?
  publicId       String
  IsVisible      Boolean   @default(true) // New field added
}

// Gallery Table
model Gallery {
  id              Int       @id @default(autoincrement())
  galleryUrl      String
  galleryName     String
  galleryPosition Int
  created_on      DateTime  @default(now())
  created_by      String
  modify_on       DateTime?
  modify_by       String?
  publicId        String
  IsVisible       Boolean   @default(true) // New field added
}

// Important Links Table
model ImportantLinks {
  id           Int       @id @default(autoincrement())
  LOGOUrl      String // Logo ki URL store hogi
  linksUrl     String // User jo link dega wo store hoga
  logoName     String
  logoPosition Int
  created_on   DateTime  @default(now())
  created_by   String
  modify_on    DateTime?
  modify_by    String?
  publicId     String
  IsVisible    Boolean   @default(true) // Visibility toggle ke liye
}

// Faculty Table
model Faculty {
  id            Int      @id @default(autoincrement())
  faculty_name  String
  qualification String
  designation   String
  profilePicUrl String?
  documents     String?  // Store JSON as a string
  monthlySalary Int?
  yearlyLeave   Int?
  created_on    DateTime @default(now())
  created_by    String
  modify_on     DateTime?
  modify_by     String?
  IsVisible     Boolean  @default(true)
}



// Latest Post Table
model LatestPost {
  post_id      Int       @id @default(autoincrement()) // Unique identifier for the post
  post_title   String // Title of the post
  post_slug    String    @unique // Slug for the post, must be unique
  post_content String    @db.NVarChar(MAX) // Large text field
  created_by   String // User who created the post
  created_on   DateTime  @default(now()) // Timestamp for when the post was created
  modify_by    String? // User who last modified the post (optional)
  modify_on    DateTime? // Timestamp for when the post was last modified (optional)
  isVisible    Boolean   @default(true) // Visibility status of the post
}

// Page Table
model Page {
  pageId      Int          @id @default(autoincrement())
  pageName    String
  pageUrl     String       @unique
  created_by  String?
  created_on  DateTime     @default(now())
  modify_by   String?
  modify_on   DateTime?
  permissions Permission[] // Add this line to establish the back relation
}

// Permission Table (Fix the missing back relations)
model Permission {
  permissionId Int       @id @default(autoincrement())
  roleId       Int
  pageId       Int
  canCreate    Boolean   @default(false)
  canRead      Boolean   @default(false)
  canUpdate    Boolean   @default(false)
  canDelete    Boolean   @default(false)
  created_by   String?
  created_on   DateTime  @default(now())
  modify_by    String?
  modify_on    DateTime?

  // Define the relations properly with back references
  role Role @relation(fields: [roleId], references: [role_id])
  page Page @relation(fields: [pageId], references: [pageId])

  @@unique([roleId, pageId]) // Ensure each role has unique permissions per page
}



model College {
  id             Int       @id @default(autoincrement())
  collegeName    String
  location       String
  establishYear  Int
  contactNumber  String
  email          String
  status         Boolean   @default(true)
  createdBy      String
  createdOn      DateTime  @default(now())
  modifiedBy     String?
  modifiedOn     DateTime?
  courses        Course[]
  students       Student[]
}

model Course {
  id             Int       @id @default(autoincrement())
  courseName     String
  collegeId      Int
  courseDuration Int
  createdBy      String
  createdOn      DateTime  @default(now())
  modifiedBy     String?
  modifiedOn     DateTime?
  status         Boolean   @default(true)
  college        College   @relation(fields: [collegeId], references: [id])
  students       Student[]
}

model Documents {
  id           Int       @id @default(autoincrement())
  studentId    Int
  documentType String
  publicId     String
  fileUrl      String
  fileName     String
  uploadDate   DateTime  @default(now())
  createdBy    String
  createdOn    DateTime  @default(now())
  modifiedBy   String?
  modifiedOn   DateTime?
  student      Student   @relation(fields: [studentId], references: [id])
}


model StudentAcademicDetails {
  id           Int       @id @default(autoincrement())
  studentId    Int
  sessionYear  String
  paymentMode  String
  adminAmount  Float     @default(0.0)
  feesAmount   Float
  numberOfEMI  Int?
  ledgerNumber String?
  courseYear   String?
  createdBy    String
  createdOn    DateTime  @default(now())
  modifiedBy   String?
  modifiedOn   DateTime?

  student      Student   @relation(fields: [studentId], references: [id])
  emiDetails   EMIDetails[]
  payments     StudentPayment[]
}

model EMIDetails {
  id                  Int       @id @default(autoincrement())
  studentId           Int
  studentAcademicId   Int
  emiNumber           Int
  amount              Float
  dueDate             DateTime
  createdBy           String
  createdOn           DateTime  @default(now())
  modifiedBy          String?
  modifiedOn          DateTime?

  student             Student   @relation(fields: [studentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  studentAcademic     StudentAcademicDetails @relation(fields: [studentAcademicId], references: [id], onDelete: Cascade)
}

model Student {
  id              Int       @id @default(autoincrement())
  stdCollId       String?
  fName           String
  lName           String?
  rollNumber      String
  gender          String
  fatherName      String
  motherName      String
  mobileNumber    String
  fatherMobile    String?
  alternateNumber String?
  dob             DateTime
  email           String
  address         String
  state           String
  pincode         String
  city            String
  admissionMode   String
  collegeId       Int
  courseId        Int
  admissionDate   DateTime
  studentImage    String?
  category        String
  isDiscontinue   Boolean    @default(false)
  isLateral       Boolean    @default(false)
  discontinueOn   DateTime?
  discontinueBy   String?
  createdBy       String
  createdOn       DateTime   @default(now())
  modifiedBy      String?
  modifiedOn      DateTime?
  status          Boolean    @default(true)
  
  college         College    @relation(fields: [collegeId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  course          Course     @relation(fields: [courseId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  documents       Documents[]
  academicDetails StudentAcademicDetails[]
  emiDetails      EMIDetails[]
  payments        StudentPayment[]
  paymentHandovers PaymentHandover[]
}

model StudentPayment {
  id                  Int       @id @default(autoincrement())
  studentId           Int
  studentAcademicId   Int?
  paymentMode         String?   // Cash, Check, Bank Transfer, UPI
  transactionNumber   String?   // Check/Transaction/Receipt #
  amount              Float?
  handoverAmount      Float     @default(0) // New field to track handed over amount
  receivedDate        DateTime?
  approvedBy          String?   // This represents "Received By"
  amountType          String?   // feesAmount, adminAmount, fineAmount, refundAmount
  receiptUrl          String?   // Cloudinary URL
  receiptPublicId     String?   // Cloudinary Public ID
  courseYear          String?
  sessionYear         String?
  createdBy           String?
  createdOn           DateTime  @default(now())
  modifiedBy          String?
  modifiedOn          DateTime?

  student             Student   @relation(fields: [studentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  studentAcademic     StudentAcademicDetails? @relation(fields: [studentAcademicId], references: [id], onDelete: SetNull)
  paymentHandovers    PaymentHandover[]
}

model PaymentHandover {
  id                  Int       @id @default(autoincrement())
  paymentId           Int
  studentId           Int
  amount              Float
  receivedBy          String    // Staff who initially received the payment
  handedOverTo        String    // Admin who received the handover
  handoverDate        DateTime
  remarks             String?
  verified            Boolean   @default(false)
  verifiedBy          String?
  verifiedOn          DateTime?
  createdOn           DateTime  @default(now())
  modifiedOn          DateTime?
  createdBy           String?
  modifiedBy          String?

  payment             StudentPayment @relation(fields: [paymentId], references: [id])
  student             Student @relation(fields: [studentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}